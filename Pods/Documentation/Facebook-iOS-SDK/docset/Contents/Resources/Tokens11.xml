<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/FBDialogs.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/FBDialogs</TokenIdentifier>
			<Abstract type="html">@class FBDialogs</Abstract>
			<DeclaredIn>FBDialogs.h</DeclaredIn>
			
			<NodeRef refid="11"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/FBDialogs/presentOSIntegratedShareDialogModallyFrom:initialText:image:url:handler:</TokenIdentifier>
			<Abstract type="html">@abstract
Presents a dialog that allows the user to share a status update that may include
text, images, or URLs. This dialog is only available on iOS 6.0 and above. The
current active session returned by [FBSession activeSession] will be used to determine
whether the dialog will be displayed. If a session is active, it must be open and the
login method used to authenticate the user must be native iOS 6.0 authentication.
If no session active, then whether the call succeeds or not will depend on
whether Facebook integration has been configured.</Abstract>
			<DeclaredIn>FBDialogs.h</DeclaredIn>			
			
			<Declaration>+ (BOOL)presentOSIntegratedShareDialogModallyFrom:(UIViewController *)viewController initialText:(NSString *)initialText image:(UIImage *)image url:(NSURL *)url handler:(FBOSIntegratedShareDialogHandler)handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>viewController</Name>
					<Abstract type="html">The view controller which will present the dialog.</Abstract>
				</Parameter><Parameter>
					<Name>initialText</Name>
					<Abstract type="html">The text which will initially be populated in the dialog. The user
will have the opportunity to edit this text before posting it. May be nil.</Abstract>
				</Parameter><Parameter>
					<Name>image</Name>
					<Abstract type="html">A UIImage that will be attached to the status update. May be nil.</Abstract>
				</Parameter><Parameter>
					<Name>url</Name>
					<Abstract type="html">An NSURL that will be attached to the status update. May be nil.</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract type="html">A handler that will be called when the dialog is dismissed, or if an error
occurs. May be nil.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the dialog was presented, NO if not (in the case of a NO result, the handler
will still be called, with an error indicating the reason the dialog was not displayed)</Abstract></ReturnValue>
			<Anchor>//api/name/presentOSIntegratedShareDialogModallyFrom:initialText:image:url:handler:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/FBDialogs/presentOSIntegratedShareDialogModallyFrom:initialText:images:urls:handler:</TokenIdentifier>
			<Abstract type="html">@abstract
Presents a dialog that allows the user to share a status update that may include
text, images, or URLs. This dialog is only available on iOS 6.0 and above. The
current active session returned by [FBSession activeSession] will be used to determine
whether the dialog will be displayed. If a session is active, it must be open and the
login method used to authenticate the user must be native iOS 6.0 authentication.
If no session active, then whether the call succeeds or not will depend on
whether Facebook integration has been configured.</Abstract>
			<DeclaredIn>FBDialogs.h</DeclaredIn>			
			
			<Declaration>+ (BOOL)presentOSIntegratedShareDialogModallyFrom:(UIViewController *)viewController initialText:(NSString *)initialText images:(NSArray *)images urls:(NSArray *)urls handler:(FBOSIntegratedShareDialogHandler)handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>viewController</Name>
					<Abstract type="html">The view controller which will present the dialog.</Abstract>
				</Parameter><Parameter>
					<Name>initialText</Name>
					<Abstract type="html">The text which will initially be populated in the dialog. The user
will have the opportunity to edit this text before posting it. May be nil.</Abstract>
				</Parameter><Parameter>
					<Name>images</Name>
					<Abstract type="html">An array of UIImages that will be attached to the status update. May
be nil.</Abstract>
				</Parameter><Parameter>
					<Name>urls</Name>
					<Abstract type="html">An array of NSURLs that will be attached to the status update. May be nil.</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract type="html">A handler that will be called when the dialog is dismissed, or if an error
occurs. May be nil.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the dialog was presented, NO if not (in the case of a NO result, the handler
will still be called, with an error indicating the reason the dialog was not displayed)</Abstract></ReturnValue>
			<Anchor>//api/name/presentOSIntegratedShareDialogModallyFrom:initialText:images:urls:handler:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/FBDialogs/presentOSIntegratedShareDialogModallyFrom:session:initialText:images:urls:handler:</TokenIdentifier>
			<Abstract type="html">@abstract
Presents a dialog that allows the user to share a status update that may include
text, images, or URLs. This dialog is only available on iOS 6.0 and above. An
FBSession may be specified, or nil may be passed to indicate that the current
active session should be used. If a session is specified (whether explicitly or by
virtue of being the active session), it must be open and the login method used to
authenticate the user must be native iOS 6.0 authentication. If no session is specified
(and there is no active session), then whether the call succeeds or not will depend on
whether Facebook integration has been configured.</Abstract>
			<DeclaredIn>FBDialogs.h</DeclaredIn>			
			
			<Declaration>+ (BOOL)presentOSIntegratedShareDialogModallyFrom:(UIViewController *)viewController session:(FBSession *)session initialText:(NSString *)initialText images:(NSArray *)images urls:(NSArray *)urls handler:(FBOSIntegratedShareDialogHandler)handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>viewController</Name>
					<Abstract type="html">The view controller which will present the dialog.</Abstract>
				</Parameter><Parameter>
					<Name>session</Name>
					<Abstract type="html">The &lt;FBSession&gt; to use to determine whether or not the user has been
authenticated with iOS native authentication. If nil, then [FBSession activeSession]
will be checked. See discussion above for the implications of nil or non-nil session.</Abstract>
				</Parameter><Parameter>
					<Name>initialText</Name>
					<Abstract type="html">The text which will initially be populated in the dialog. The user
will have the opportunity to edit this text before posting it. May be nil.</Abstract>
				</Parameter><Parameter>
					<Name>images</Name>
					<Abstract type="html">An array of UIImages that will be attached to the status update. May
be nil.</Abstract>
				</Parameter><Parameter>
					<Name>urls</Name>
					<Abstract type="html">An array of NSURLs that will be attached to the status update. May be nil.</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract type="html">A handler that will be called when the dialog is dismissed, or if an error
occurs. May be nil.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the dialog was presented, NO if not (in the case of a NO result, the handler
will still be called, with an error indicating the reason the dialog was not displayed)</Abstract></ReturnValue>
			<Anchor>//api/name/presentOSIntegratedShareDialogModallyFrom:session:initialText:images:urls:handler:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/FBDialogs/canPresentOSIntegratedShareDialogWithSession:</TokenIdentifier>
			<Abstract type="html">@abstract
Determines whether a call to presentShareDialogModallyFrom: will successfully present
a dialog. This is useful for applications that need to modify the available UI controls
depending on whether the dialog is available on the current platform and for the current
user.</Abstract>
			<DeclaredIn>FBDialogs.h</DeclaredIn>			
			
			<Declaration>+ (BOOL)canPresentOSIntegratedShareDialogWithSession:(FBSession *)session</Declaration>
			<Parameters>
				<Parameter>
					<Name>session</Name>
					<Abstract type="html">The &lt;FBSession&gt; to use to determine whether or not the user has been
authenticated with iOS native authentication. If nil, then [FBSession activeSession]
will be checked. See discussion above for the implications of nil or non-nil session.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the dialog would be presented for the session, and NO if not</Abstract></ReturnValue>
			<Anchor>//api/name/canPresentOSIntegratedShareDialogWithSession:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/FBDialogs/canPresentShareDialogWithParams:</TokenIdentifier>
			<Abstract type="html">@abstract
Determines whether a call to presentFBShareDialogWithTarget: will successfully
present a dialog in the Facebook application. This is useful for applications that
need to modify the available UI controls depending on whether the dialog is
available on the current platform.</Abstract>
			<DeclaredIn>FBDialogs.h</DeclaredIn>			
			
			<Declaration>+ (BOOL)canPresentShareDialogWithParams:(FBShareDialogParams *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">The parameters for the FB share dialog.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the dialog would be presented, and NO if not

@discussion A return value of YES here indicates that the corresponding
presentFBShareDialogWithParams method will return a non-nil FBAppCall for the same
params. And vice versa.</Abstract></ReturnValue>
			<Anchor>//api/name/canPresentShareDialogWithParams:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/FBDialogs/presentShareDialogWithParams:clientState:handler:</TokenIdentifier>
			<Abstract type="html">@abstract
Presents a dialog in the Facebook application that allows the user to share a status
update that may include text, images, or URLs. No session is required, and the app
does not need to be authorized to call this.</Abstract>
			<DeclaredIn>FBDialogs.h</DeclaredIn>			
			
			<Declaration>+ (FBAppCall *)presentShareDialogWithParams:(FBShareDialogParams *)params clientState:(NSDictionary *)clientState handler:(FBDialogAppCallCompletionHandler)handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">The parameters for the FB share dialog.</Abstract>
				</Parameter><Parameter>
					<Name>clientState</Name>
					<Abstract type="html">An NSDictionary that&apos;s passed through when the completion handler
is called. This is useful for the app to maintain state about the share request that
was made so as to have appropriate action when the handler is called. May be nil.</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract type="html">A completion handler that may be called when the status update is
complete. May be nil. If non-nil, the handler will always be called asynchronously.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An FBAppCall object that will also be passed into the provided
FBAppCallCompletionHandler.

@discussion A non-nil FBAppCall object is only returned if the corresponding
canPresetFBShareDialogWithParams method is also returning YES for the same params.</Abstract></ReturnValue>
			<Anchor>//api/name/presentShareDialogWithParams:clientState:handler:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/FBDialogs/presentShareDialogWithLink:handler:</TokenIdentifier>
			<Abstract type="html">@abstract
Presents a dialog in the Facebook application that allows the user to share the
supplied link. No session is required, and the app does not need to be authorized
to call this.</Abstract>
			<DeclaredIn>FBDialogs.h</DeclaredIn>			
			
			<Declaration>+ (FBAppCall *)presentShareDialogWithLink:(NSURL *)link handler:(FBDialogAppCallCompletionHandler)handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>link</Name>
					<Abstract type="html">The URL link to be attached to the post.</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract type="html">A completion handler that may be called when the status update is
complete. May be nil. If non-nil, the handler will always be called asynchronously.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An FBAppCall object that will also be passed into the provided
FBAppCallCompletionHandler.

@discussion A non-nil FBAppCall object is only returned if the corresponding
canPresetFBShareDialogWithParams method is also returning YES for the same params.</Abstract></ReturnValue>
			<Anchor>//api/name/presentShareDialogWithLink:handler:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/FBDialogs/presentShareDialogWithLink:name:handler:</TokenIdentifier>
			<Abstract type="html">@abstract
Presents a dialog in the Facebook application that allows the user to share the
supplied link. No session is required, and the app does not need to be authorized
to call this.</Abstract>
			<DeclaredIn>FBDialogs.h</DeclaredIn>			
			
			<Declaration>+ (FBAppCall *)presentShareDialogWithLink:(NSURL *)link name:(NSString *)name handler:(FBDialogAppCallCompletionHandler)handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>link</Name>
					<Abstract type="html">The URL link to be attached to the post.</Abstract>
				</Parameter><Parameter>
					<Name>name</Name>
					<Abstract type="html">The name, or title associated with the link. May be nil.</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract type="html">A completion handler that may be called when the status update is
complete. May be nil. If non-nil, the handler will always be called asynchronously.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An FBAppCall object that will also be passed into the provided
FBAppCallCompletionHandler.

@discussion A non-nil FBAppCall object is only returned if the corresponding
canPresetFBShareDialogWithParams method is also returning YES for the same params.</Abstract></ReturnValue>
			<Anchor>//api/name/presentShareDialogWithLink:name:handler:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/FBDialogs/presentShareDialogWithLink:name:caption:description:picture:clientState:handler:</TokenIdentifier>
			<Abstract type="html">@abstract
Presents a dialog in the Facebook application that allows the user to share the
supplied link. No session is required, and the app does not need to be authorized
to call this.</Abstract>
			<DeclaredIn>FBDialogs.h</DeclaredIn>			
			
			<Declaration>+ (FBAppCall *)presentShareDialogWithLink:(NSURL *)link name:(NSString *)name caption:(NSString *)caption description:(NSString *)description picture:(NSURL *)picture clientState:(NSDictionary *)clientState handler:(FBDialogAppCallCompletionHandler)handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>link</Name>
					<Abstract type="html">The URL link to be attached to the post.</Abstract>
				</Parameter><Parameter>
					<Name>name</Name>
					<Abstract type="html">The name, or title associated with the link. May be nil.</Abstract>
				</Parameter><Parameter>
					<Name>caption</Name>
					<Abstract type="html">The caption to be used with the link. May be nil.</Abstract>
				</Parameter><Parameter>
					<Name>description</Name>
					<Abstract type="html">The description associated with the link. May be nil.</Abstract>
				</Parameter><Parameter>
					<Name>picture</Name>
					<Abstract type="html">The link to a thumbnail to associate with the link. May be nil.</Abstract>
				</Parameter><Parameter>
					<Name>clientState</Name>
					<Abstract type="html">An NSDictionary that&apos;s passed through when the completion handler
is called. This is useful for the app to maintain state about the share request that
was made so as to have appropriate action when the handler is called. May be nil.</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract type="html">A completion handler that may be called when the status update is
complete. May be nil. If non-nil, the handler will always be called asynchronously.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An FBAppCall object that will also be passed into the provided
FBAppCallCompletionHandler.

@discussion A non-nil FBAppCall object is only returned if the corresponding
canPresetFBShareDialogWithParams method is also returning YES for the same params.</Abstract></ReturnValue>
			<Anchor>//api/name/presentShareDialogWithLink:name:caption:description:picture:clientState:handler:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/FBDialogs/canPresentShareDialogWithOpenGraphActionParams:</TokenIdentifier>
			<Abstract type="html">@abstract
Determines whether a call to presentFBShareDialogWithOpenGraphActionParams:clientState:handler:
will successfully present a dialog in the Facebook application. This is useful for applications
that need to modify the available UI controls depending on whether the dialog is
available on the current platform.</Abstract>
			<DeclaredIn>FBDialogs.h</DeclaredIn>			
			
			<Declaration>+ (BOOL)canPresentShareDialogWithOpenGraphActionParams:(FBOpenGraphActionShareDialogParams *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">The parameters for the FB share dialog.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the dialog would be presented, and NO if not

@discussion A return value of YES here indicates that the corresponding
presentFBShareDialogWithOpenGraphActionParams method will return a non-nil FBAppCall for
the same params. And vice versa.</Abstract></ReturnValue>
			<Anchor>//api/name/canPresentShareDialogWithOpenGraphActionParams:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/FBDialogs/presentShareDialogWithOpenGraphActionParams:clientState:handler:</TokenIdentifier>
			<Abstract type="html">@abstract
Presents a dialog in the Facebook application that allows the user to publish an Open
Graph action. No session is required, and the app does not need to be authorized to call
this.</Abstract>
			<DeclaredIn>FBDialogs.h</DeclaredIn>			
			
			<Declaration>+ (FBAppCall *)presentShareDialogWithOpenGraphActionParams:(FBOpenGraphActionShareDialogParams *)params clientState:(NSDictionary *)clientState handler:(FBDialogAppCallCompletionHandler)handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">The parameters for the Open Graph action dialog.</Abstract>
				</Parameter><Parameter>
					<Name>clientState</Name>
					<Abstract type="html">An NSDictionary that&apos;s passed through when the completion handler
is called. This is useful for the app to maintain state about the share request that
was made so as to have appropriate action when the handler is called. May be nil.</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract type="html">A completion handler that may be called when the status update is
complete. May be nil. If non-nil, the handler will always be called asynchronously.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An FBAppCall object that will also be passed into the provided
FBAppCallCompletionHandler.

@discussion A non-nil FBAppCall object is only returned if the corresponding
canPresentFBShareDialogWithOpenGraphActionParams method is also returning YES for the same params.</Abstract></ReturnValue>
			<Anchor>//api/name/presentShareDialogWithOpenGraphActionParams:clientState:handler:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/FBDialogs/presentShareDialogWithOpenGraphAction:actionType:previewPropertyName:handler:</TokenIdentifier>
			<Abstract type="html">@abstract
Presents a dialog in the Facebook application that allows the user to publish the
supplied Open Graph action. No session is required, and the app does not need to be
authorized to call this.</Abstract>
			<DeclaredIn>FBDialogs.h</DeclaredIn>			
			
			<Declaration>+ (FBAppCall *)presentShareDialogWithOpenGraphAction:(id&lt;FBOpenGraphAction&gt;)action actionType:(NSString *)actionType previewPropertyName:(NSString *)previewPropertyName handler:(FBDialogAppCallCompletionHandler)handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>action</Name>
					<Abstract type="html">The Open Graph action to be published. May not be nil.</Abstract>
				</Parameter><Parameter>
					<Name>actionType</Name>
					<Abstract type="html">the fully-specified Open Graph action type of the action (e.g.,
myappnamespace:my_action).</Abstract>
				</Parameter><Parameter>
					<Name>previewPropertyName</Name>
					<Abstract type="html">the name of the property on the action that represents the
primary Open Graph object associated with the action; this object will be displayed in the
preview portion of the share dialog.</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract type="html">A completion handler that may be called when the status update is
complete. May be nil. If non-nil, the handler will always be called asynchronously.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An FBAppCall object that will also be passed into the provided
FBAppCallCompletionHandler.

@discussion A non-nil FBAppCall object is only returned if the corresponding
canPresentFBShareDialogWithOpenGraphActionParams method is also returning YES for the same params.</Abstract></ReturnValue>
			<Anchor>//api/name/presentShareDialogWithOpenGraphAction:actionType:previewPropertyName:handler:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/FBDialogs/presentShareDialogWithOpenGraphAction:actionType:previewPropertyName:clientState:handler:</TokenIdentifier>
			<Abstract type="html">@abstract
Presents a dialog in the Facebook application that allows the user to publish the
supplied Open Graph action. No session is required, and the app does not need to be
authorized to call this.</Abstract>
			<DeclaredIn>FBDialogs.h</DeclaredIn>			
			
			<Declaration>+ (FBAppCall *)presentShareDialogWithOpenGraphAction:(id&lt;FBOpenGraphAction&gt;)action actionType:(NSString *)actionType previewPropertyName:(NSString *)previewPropertyName clientState:(NSDictionary *)clientState handler:(FBDialogAppCallCompletionHandler)handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>action</Name>
					<Abstract type="html">The Open Graph action to be published. May not be nil.</Abstract>
				</Parameter><Parameter>
					<Name>actionType</Name>
					<Abstract type="html">the fully-specified Open Graph action type of the action (e.g.,
myappnamespace:my_action).</Abstract>
				</Parameter><Parameter>
					<Name>previewPropertyName</Name>
					<Abstract type="html">the name of the property on the action that represents the
primary Open Graph object associated with the action; this object will be displayed in the
preview portion of the share dialog.</Abstract>
				</Parameter><Parameter>
					<Name>clientState</Name>
					<Abstract type="html">An NSDictionary that&apos;s passed through when the completion handler
is called. This is useful for the app to maintain state about the share request that
was made so as to have appropriate action when the handler is called. May be nil.</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract type="html">A completion handler that may be called when the status update is
complete. May be nil. If non-nil, the handler will always be called asynchronously.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An FBAppCall object that will also be passed into the provided
FBAppCallCompletionHandler.

@discussion A non-nil FBAppCall object is only returned if the corresponding
canPresentFBShareDialogWithOpenGraphActionParams method is also returning YES for the same params.</Abstract></ReturnValue>
			<Anchor>//api/name/presentShareDialogWithOpenGraphAction:actionType:previewPropertyName:clientState:handler:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/FBDialogs/canPresentLoginDialogWithParams:</TokenIdentifier>
			<Abstract type="html">@abstract
Determines whether the corresponding presentFBLoginDialogWithParams:clientState:handler:
is supported by the installed version of the Facebook app for iOS.</Abstract>
			<DeclaredIn>FBDialogs+Internal.h</DeclaredIn>			
			
			<Declaration>+ (BOOL)canPresentLoginDialogWithParams:(FBLoginDialogParams *)params</Declaration>
			
			
			<Anchor>//api/name/canPresentLoginDialogWithParams:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/FBDialogs/presentLoginDialogWithParams:clientState:handler:</TokenIdentifier>
			<Abstract type="html">@abstract
Switches to the native Facebook App and shows the login dialog for the requested login params</Abstract>
			<DeclaredIn>FBDialogs+Internal.h</DeclaredIn>			
			
			<Declaration>+ (FBAppCall *)presentLoginDialogWithParams:(FBLoginDialogParams *)params clientState:(NSDictionary *)clientState handler:(FBDialogAppCallCompletionHandler)handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">Params for the native Login dialog</Abstract>
				</Parameter><Parameter>
					<Name>clientState</Name>
					<Abstract type="html">An NSDictionary that&apos;s passed through when the completion handler
is called. This is useful for the app to maintain state. May be nil.</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract type="html">A completion handler that may be called when the login is
complete. May be nil. If non-nil, the handler will always be called asynchronously.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An FBAppCall object that will also be passed into the provided
FBAppCallCompletionHandler.

@discussion A non-nil FBAppCall object is only returned if the corresponding
canPresentFBLoginDialogWithParams method is also returning YES for the same params.</Abstract></ReturnValue>
			<Anchor>//api/name/presentLoginDialogWithParams:clientState:handler:</Anchor>
		</Token>
		
	</File>
</Tokens>